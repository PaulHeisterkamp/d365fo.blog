name: $(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

trigger:
- none

pool:
  vmImage: 'windows-latest'

# Variables/parameters needed for downlod from LCS and push to Azure DevOps
parameters:
- name: LcsFileAssetName
  displayName: Seach pattern to find the relevant D365 NuGets
  type: string
  default: 'PU41*'
- name: LcsServiceConnectionName
  displayName: Service conncetion name to use for LCS deployment
  type: string
  default: 'LCS - Connection'
- name: LcsProjectId
  displayName: LCS project id to deploy build result 
  type: number
  default: 0 

# Declare some shorthand for NuGet package names
# Make editing the path for metadata and NuGet extraction folder easier
variables:  
  NugetConfigsPath: '$(Build.SourcesDirectory)\Metadata'
  NugetsPath: '$(Pipeline.Workspace)\NuGets'

stages:
- stage: DownloadAndPushD365FoNuGet
  displayName: 'Download and push D365 NuGet'
  jobs:
  - job: DownloadAndPushD365FoNuGet    
    displayName: 'Download and push D365 NuGet'
    steps:
    - checkout: none
    
    - task: LCSAssetDownload@0
      name : DownloadNuGet
      displayName: 'Download NuGet from LCS'
      inputs:
        serviceConnectionName: ${{ parameters.LcsServiceConnectionName }}
        projectId: ${{ parameters.LcsProjectId }}
        assetPath: '$(Build.ArtifactStagingDirectory)'
        # Name
        searchPattern: '1'
        # NuGet Package
        fileAssetType: '27'
        fileAssetName: ${{ parameters.LcsFileAssetName }}

    - task: PowerShell@2
      displayName: 'Push D365 NuGet'
      inputs:
        targetType: 'inline'
        script: |
          $nuGets = Get-ChildItem -Path '*' -File
          foreach($nuGet in $nuGets)
          {
              write-output $nuGet.Name
              write-output $nuGet.FullName
          }
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
    