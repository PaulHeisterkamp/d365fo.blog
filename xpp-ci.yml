# Sample YML pipeline for X++ builds
# For more information on build pipelines, see
# https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/dev-tools/hosted-build-automation

# Change the name of the build to a 4-digit version number to be used for model versioning
name: $(Date:yy.MM.dd)$(Rev:.r)
trigger:
- master

pool:
# Use the VS2017 image
  vmImage: 'vs2017-win2016'
  demands:
    - msbuild
    - visualstudio
  
# Variables/parameters needed for upload to LCS and deploy via LCS
parameters:
- name: UploadToLCS
  displayName: Do you want to upload the build result to LCS?
  type: boolean
  default: false
- name: DeployToLCSEnvironment
  displayName: Do you want to deploy the build result to the LCS environment?
  type: boolean
  default: false
- name: BuildArtifactName
  displayName: Build artifact name to use for LCS deployment.
  type: string
  default: 'drop'
- name: LcsServiceConnectionName
  displayName: Service conncetion name to use for LCS deployment
  type: string
  default: 'LCS - Connection'
- name: LcsProjectId
  displayName: LCS project id to deploy build result 
  type: number
  default: 0 
- name: LcsEnvironmentId
  displayName: LCS environment id to deploy build result 
  type: string
  default: '00000000-0000-0000-0000-000000000000'

# Declare some shorthand for NuGet package names
# Make editing the path for metadata and NuGet extraction folder easier
variables:
  AppPackage: 'Microsoft.Dynamics.AX.Application.DevALM.BuildXpp'
  AppSuitePackage: 'Microsoft.Dynamics.AX.ApplicationSuite.DevALM.BuildXpp'
  PlatPackage: 'Microsoft.Dynamics.AX.Platform.DevALM.BuildXpp'
  ToolsPackage: 'Microsoft.Dynamics.AX.Platform.CompilerPackage'
  MetadataPath: '$(Build.SourcesDirectory)\Metadata'
  NugetConfigsPath: '$(Build.SourcesDirectory)\Metadata'
  NugetsPath: '$(Pipeline.Workspace)\NuGets'

stages:
- stage: D365Build
  displayName: 'Build D365 application'
  jobs:
  - job: D365Build    
    displayName: 'Build D365 application'    
    steps:
    # Install NuGet and use -ExcludeVersion option to avoid paths containing version numbers
    - task: NuGetInstaller@0
      displayName: 'NuGet install Packages'
      inputs:
        solution: '$(NugetConfigsPath)\packages.config'
        nugetConfigPath: '$(NugetConfigsPath)\nuget.config'
        restoreMode: install
        nuGetRestoreArgs: '-ExcludeVersion -OutputDirectory "$(NugetsPath)"'
        nuGetVersion: 4.0.0.2283

    # Use the custom build number y.m.d.rev as the model version
    # Default updates only VAR layer and above
    - task: XppUpdateModelVersion@0
      displayName: 'Update Model Version'
      inputs:
        XppSourcePath: '$(MetadataPath)'
        VersionNumber: '$(Build.BuildNumber)'

    # In case the X++ code has check-in binary dependencies, copy them to the output folder
    # This is needed for packaging but also for the X++ compiler
    - task: CopyFiles@2
      displayName: 'Copy Binary Dependencies to: $(Build.BinariesDirectory)'
      inputs:
        SourceFolder: '$(MetadataPath)'
        Contents: '**/bin/**'
        TargetFolder: '$(Build.BinariesDirectory)'

    # Build using MSBuild 15 (VS 2017)
    # Provide the needed paths, including semi-colon separated list of reference folders
    # /p:ReferenceFolder are metadata folders containing other (compiled) X++ packages that are referenced
    # /p:ReferencePath are folders containing non-X++ assemblies referenced (aside from one already in the output folder for the package)
    - task: VSBuild@1
      displayName: 'Build solution **\*.sln'
      inputs:
        solution: '**/*.sln'
        vsVersion: '15.0'
        msbuildArgs: '/p:BuildTasksDirectory="$(NugetsPath)\$(ToolsPackage)\DevAlm" /p:MetadataDirectory="$(MetadataPath)" /p:FrameworkDirectory="$(NuGetsPath)\$(ToolsPackage)" /p:ReferenceFolder="$(NuGetsPath)\$(PlatPackage)\ref\net40;$(NuGetsPath)\$(AppPackage)\ref\net40;$(NuGetsPath)\$(AppSuitePackage)\ref\net40;$(MetadataPath);$(Build.BinariesDirectory)" /p:ReferencePath="$(NuGetsPath)\$(ToolsPackage)" /p:OutputDirectory="$(Build.BinariesDirectory)"'

    # Copy the compiler log files to the drop artifacts
    - task: CopyFiles@2
      displayName: 'Copy X++ Compile Log Files to: $(Build.ArtifactStagingDirectory)\Logs'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          **\Dynamics.AX.*.xppc.*
          **\Dynamics.AX.*.labelc.*
          **\Dynamics.AX.*.reportsc.*
        TargetFolder: '$(build.ArtifactStagingDirectory)\Logs'
      condition: succeededOrFailed()

    # For packaging we need NuGet installed, with a version <3.4.0
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 3.3.0'
      inputs:
        versionSpec: 3.3.0

    - task: XppCreatePackage@0
      displayName: 'Create Deployable Package'
      inputs:
        XppToolsPath: '$(NuGetsPath)\$(ToolsPackage)'

    # Enable this task to add a license file to the package
    - task: XppAddLicenseToPackage@0
      displayName: 'Add Licenses to Deployable Package'
      enabled: false

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

# Upload to LCS and deploy via LCS
- ${{ if or(eq(parameters.UploadToLCS, true), eq(parameters.DeployToLCSEnvironment, true)) }}:
  - template: xpp-ci-LCS-deployment.yml
    parameters:
      buildArtifactName: ${{ parameters.BuildArtifactName }}
      lcsServiceConnectionName: ${{ parameters.LcsServiceConnectionName }}
      lcsEnvironmentId: ${{ parameters.LcsEnvironmentId }}
      lcsProjectId: ${{ parameters.LcsProjectId }}
      lcsPackages:
        - name: AXDeployableRuntime
          artifactAssetPath: 'AXDeployableRuntime_$(Build.BuildNumber).zip'
          deployPackage: ${{ parameters.DeployToLCSEnvironment }}